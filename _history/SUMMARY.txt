# aidiosCal2 프로젝트 - 작업 기록 요약본 
## 📅 최종 업데이트: 2024년 12월 29일 (2025-06-02 최신 정보 반영)

## 🎯 프로젝트 개요
한국어 기반 일정 관리 시스템으로, 팀 기반 협업 및 개인 일정 관리를 지원하는 웹 애플리케이션

## 📊 현재 시스템 상태

### 사용자 데이터베이스 구조
- **총 사용자**: 6명 (admin, viewer, june9713, foryourglory, pci8099, kwj6097)
- **기본 필드**: id, username, name, hashed_password, is_active
- **확장 필드**: email, nickname, address, team, phone1, phone2, phone3, fax
- **팀 시스템**: 모든 사용자 현재 "AIDIOS" 팀 소속

### 팀 관리 시스템 (최신 구현)
#### 데이터베이스 모델:
- **Team**: UUID 기반 ID, 팀명, 설명, 초대코드, 리더, 활성상태
- **TeamMember**: 사용자-팀 관계, 역할(leader/member), 상태(pending/approved/rejected)
- **TeamInvitation**: 가입 요청 추적 시스템

#### 핵심 API 엔드포인트:
```
POST /teams                     - 팀 생성
GET /teams                      - 내 팀 목록
POST /teams/join                - 팀 가입 요청 (초대코드)
GET /teams/{id}/members         - 팀원 목록
POST /teams/{id}/manage-member  - 팀원 관리 (승인/거절/추방)
```

#### 기본 팀 설정:
- **AIDIOS 팀**: 초대코드 "aidios1111", admin이 리더
- **UUID 기반 보안**: 팀 ID 추측 공격 방지
- **권한 시스템**: 리더만 팀원 관리 가능

### 세션 관리 시스템 (최신 분석)
#### 이중 세션 관리 구조:
- **HttpOnly 쿠키**: `session_token` 쿠키로 보안 강화
- **localStorage 백업**: 토큰, 사용자 데이터, 생성 시간 저장
- **자동 로그인**: 브라우저 재시작 시에도 세션 유지

#### JWT 토큰 설정:
- **만료 시간**: 30일 (ACCESS_TOKEN_EXPIRE_MINUTES = 43200분)
- **알고리즘**: HS256
- **갱신 주기**: 6시간마다 자동 체크, 24시간 전 갱신

### 프론트엔드 구조
#### 메인 화면 (`static/entryScreen.html`):
- **탭 기반 팀 관리**: 내 팀, 팀 생성, 팀 참여, 팀원 관리
- **컨트롤 버튼**: 엑셀 출력, 사용자 정보 수정, 팀 관리, 로그아웃
- **반응형 디자인**: 모바일 최적화
- **자동 새로고침**: 10초마다 일정 업데이트

#### JavaScript 구조 (`static/js/main.js`):
- **팀 관리 함수**: 생성, 가입, 승인, 거절, 추방
- **사용자 프로필 관리**: 정보 수정 모달 및 API 연동
- **시간 처리**: 한국시간(UTC+9) 일관된 처리 로직
- **데이터 캐싱**: 팀 목록 메모리 저장으로 성능 최적화
- **세션 관리**: 자동 로그인, 토큰 갱신, 세션 유지

## 🛠️ 기술 스택

### 백엔드:
- **프레임워크**: FastAPI
- **데이터베이스**: SQLite (`sql_app.db`)
- **ORM**: SQLAlchemy
- **인증**: JWT Bearer Token + HttpOnly 쿠키
- **스키마 검증**: Pydantic

### 프론트엔드:
- **기본**: HTML5, CSS3, Vanilla JavaScript
- **아이콘**: Font Awesome
- **스타일**: 사용자 정의 CSS (style.css)
- **반응형**: CSS Grid + Flexbox

### 파일 구조:
```
aidiosCal2/
├── app/
│   ├── models/models.py       # SQLAlchemy 모델
│   ├── schemas/schemas.py     # Pydantic 스키마
│   ├── core/auth.py          # JWT 토큰 생성/검증
│   └── routers/
│       ├── auth.py           # 사용자 인증
│       ├── teams.py          # 팀 관리 API
│       ├── schedules.py      # 일정 관리
│       ├── alarms.py         # 알람 시스템
│       └── attachments.py    # 파일 관리
├── static/
│   ├── entryScreen.html      # 메인 화면
│   ├── css/style.css         # 스타일시트
│   └── js/main.js           # 메인 JavaScript
├── sql_app.db               # SQLite 데이터베이스
└── main.py                  # FastAPI 진입점
```

## 🔧 최근 해결된 주요 문제들

### 1. JavaScript 오류 수정 (2024-12-29)
- **문제**: main.js 파일 끝부분 함수 누락으로 구문 오류
- **해결**: manageMember 함수 완성 및 누락 함수들 추가
- **결과**: "Unexpected end of input" 오류 해결

### 2. 함수 로딩 순서 문제 해결
- **문제**: entryScreen.html에서 initializeApp 함수 호출 시점 오류
- **해결**: setTimeout을 사용한 스크립트 로드 완료 대기
- **결과**: "initializeApp is not defined" 오류 해결

### 3. 시간 처리 일관성 확보
- **문제**: main.js에서 이중 시간 보정(+9시간) 문제
- **해결**: getCurrentTime() 함수 제거, 일관된 오프셋 적용
- **결과**: 정확한 한국시간 표시

### 4. 함수 이름 충돌 해결
- **문제**: main.js와 calendar.js의 formatDate 함수 충돌
- **해결**: calendar.js의 함수를 formatCalendarDate로 이름 변경
- **결과**: "date.getFullYear is not a function" 오류 해결

### 5. showScheduleInterface 함수 누락 해결 (2025-06-02)
- **문제**: fetchUserProfile에서 showScheduleInterface 호출하지만 함수 미정의
- **해결**: 백업 파일에서 함수 복원하여 main.js에 추가
- **결과**: "showScheduleInterface is not defined" 오류 해결
- **영향**: 로그인 후 정상적으로 스케줄 인터페이스 표시

## 🚀 핵심 기능 현황

### ✅ 완료된 기능:
- [x] 사용자 인증 시스템 (JWT 토큰 + 쿠키)
- [x] 팀 생성 및 관리 (UUID 기반 보안)
- [x] 팀 가입 시스템 (초대코드)
- [x] 팀원 관리 (승인/거절/추방)
- [x] 사용자 프로필 수정
- [x] 일정 관리 기본 기능 (CRUD)
- [x] 한국시간 일관된 처리
- [x] 반응형 모바일 UI
- [x] 세션 유지 시스템 (브라우저 재시작에도 유지)
- [x] 알람 시스템 (10초마다 폴링)
- [x] 파일 첨부 기능

### 🔄 현재 상태:
- **팀 시스템**: 완전히 구현됨, AIDIOS 기본 팀 운영 중
- **사용자 관리**: 6명 활성 사용자, 확장 프로필 정보 포함
- **JavaScript**: 모든 구문 오류 해결 완료
- **시간 처리**: 일관된 UTC+9 적용
- **세션 관리**: 안정적 이중 세션 관리 시스템 운영

### 📝 향후 계획:
- [ ] 팀별 일정 필터링 연동
- [ ] 사용자 프로필의 팀 선택 업데이트
- [ ] 팀 설정 변경 (이름, 설명 수정)
- [ ] 팀 통계 대시보드
- [ ] 달력 뷰와 팀 시스템 연동
- [ ] JWT 토큰 만료 시간 단축 (30일 → 7일)
- [ ] HTTPS 환경에서 보안 설정 강화

## 🔐 보안 및 권한

### 인증 시스템:
- **JWT 토큰**: Bearer Token 기반 API 인증
- **HttpOnly 쿠키**: XSS 공격 방지를 위한 보안 쿠키
- **세션 관리**: 토큰 만료 시 자동 갱신
- **권한 분리**: 리더/멤버 역할 기반 접근 제어

### 데이터 보안:
- **UUID 팀 ID**: 추측 공격 방지
- **초대코드**: secrets.token_urlsafe() 사용
- **SQL Injection**: SQLAlchemy ORM으로 방지
- **XSS 방지**: HTML 이스케이프 처리
- **CSRF 방지**: SameSite=lax 쿠키 설정

### 보안 개선 필요사항:
- **토큰 만료 시간**: 현재 30일은 과도함, 7일로 단축 검토
- **HTTPS 설정**: 프로덕션에서 secure=True 필요
- **CORS 정책**: 현재 "*" 허용, 세밀한 설정 필요

## 🎯 중요 설정값

### 데이터베이스 연결:
- **위치**: `./sql_app.db`
- **백업**: `sql_app_backup_before_migration.db`

### API 기본 설정:
- **Base URL**: `/` (루트)
- **인증 헤더**: `Authorization: Bearer {token}`
- **Content-Type**: `application/json`
- **세션 쿠키**: `session_token` (HttpOnly, 30일 만료)

### 팀 시스템 설정:
- **기본 팀**: AIDIOS (초대코드: aidios1111)
- **최대 팀원**: 제한 없음
- **팀 ID 형식**: UUID4 (예: 550e8400-e29b-41d4-a716-446655440000)

### 세션 관리 설정:
- **JWT 만료**: 30일 (43200분)
- **토큰 갱신**: 24시간 전 자동 갱신
- **폴링 주기**: 알람 10초, 토큰 체크 6시간

## ⚠️ 주의사항

### 개발 시 고려사항:
1. **시간 처리**: 모든 시간 관련 로직은 한국시간(UTC+9) 일관성 유지
2. **팀 권한**: 리더만 팀원 관리 가능, 권한 검증 필수
3. **API 호출**: 모든 요청에 Bearer 토큰 포함 필요
4. **오류 처리**: try-catch 블록으로 네트워크 오류 대응
5. **모달 관리**: z-index 충돌 방지, 표시/숨김 함수 쌍 구현
6. **함수 백업**: 중요 함수들은 백업 파일과 동기화 유지
7. **세션 보안**: 민감한 정보는 HttpOnly 쿠키 사용

### 데이터 처리:
1. **NULL 처리**: 모든 확장 필드는 nullable=True
2. **입력 검증**: 클라이언트 + 서버 이중 검증
3. **HTML 이스케이프**: 사용자 입력 데이터 XSS 방지
4. **팀 상태**: pending → approved → active 상태 흐름 준수
5. **세션 동기화**: localStorage와 쿠키 데이터 일관성 유지

### 성능 최적화:
1. **캐싱**: 팀 목록 메모리 저장으로 API 호출 최소화
2. **병렬 로딩**: 팀 정보와 멤버 목록 동시 로드
3. **인덱싱**: 팀 ID, 사용자 ID, 상태별 DB 인덱스 활용
4. **자동 새로고침**: 과도한 폴링 주기 조정 검토 (10초 → 30초)

## 🧪 테스트 가이드

### 팀 관리 테스트:
1. **팀 생성**: 새 팀 생성 → 초대코드 확인 → 리더 권한 확인
2. **팀 가입**: 초대코드로 가입 → 대기 상태 → 리더 승인
3. **권한 테스트**: 비리더의 관리 기능 접근 차단 확인

### 사용자 관리 테스트:
1. **프로필 수정**: 정보 입력 → 저장 → 조회 확인
2. **팀 변경**: 팀 선택 → 저장 → 반영 확인
3. **권한 확인**: 본인 정보만 수정 가능

### 세션 관리 테스트:
1. **자동 로그인**: 브라우저 재시작 → 자동 로그인 → 인터페이스 표시
2. **토큰 갱신**: 토큰 만료 임박 → 자동 갱신 → 세션 유지
3. **로그아웃**: 로그아웃 → 쿠키 삭제 → localStorage 정리

### 시간 처리 테스트:
1. **일정 생성**: 시간 설정 → 저장 → 정확한 시간 표시
2. **오늘 표시**: 당일 일정 "오늘" 표시 확인
3. **달력 연동**: 메인과 달력 뷰 시간 일치성

이 요약본은 aidiosCal2 프로젝트의 현재 상태를 정확히 파악하고 향후 개발을 진행하는데 필요한 모든 핵심 정보를 포함하고 있습니다. 