# 단계 1: 기본 프로젝트 구조 분석

## 목표
1. 프로젝트 파일 구조 파악
2. 주요 컴포넌트 식별
3. 의존성 분석
4. 초기 문서화

## 세부 작업
1. 프로젝트 스캔
   - getAllfiles.py 실행
   - 디렉토리 구조 분석
   - 주요 파일 식별

2. 코드 분석
   - main.py 분석
   - app 디렉토리 구조 파악
   - 데이터베이스 스키마 검토
   - API 엔드포인트 매핑

3. 의존성 검토
   - requirements.txt 분석
   - 외부 라이브러리 역할 파악
   - 버전 호환성 확인

4. 문서화
   - README.md 업데이트
   - 코드 주석 검토
   - API 문서화 상태 확인

## 예상 결과물
1. 프로젝트 구조 문서
2. 주요 컴포넌트 목록
3. 의존성 관계도
4. 초기 분석 보고서 

total-view-btn 기능 구현 및 totalview.html 페이지 생성 계획

현재 목표:
1. total-view-btn 버튼 클릭 이벤트 구현
2. totalview.html 페이지 생성
3. entryScreen.html을 iframe으로 표시하는 기능 구현

구체적 작업 순서:

1단계: total-view-btn 클릭 이벤트 구현
- main.js에 total-view-btn 클릭 이벤트 리스너 추가
- totalview.html로 이동하는 함수 구현

2단계: totalview.html 페이지 생성
- 4xn 그리드 레이아웃 구조
- 상단 컨트롤 패널:
  * iframe 개수 입력 필드
  * 목록보기/월간보기/주간보기/로그아웃 버튼
- iframe 컨테이너 영역

3단계: iframe 관리 기능
- iframe 개수에 따라 동적으로 iframe 생성
- 각 iframe에 entryScreen.html 로드
- 4열 그리드 레이아웃 유지
- 각 iframe 크기: width/4, height=900px

4단계: 스타일링
- 기존 CSS 스타일과 일관성 유지
- 반응형 디자인 적용
- iframe 간격 및 정렬 조정

예상 파일 수정:
- static/js/main.js (이벤트 리스너 추가)
- static/totalview.html (신규 생성)
- static/css/style.css (스타일 추가)
- static/js/totalview.js (신규 생성, totalview 전용 기능) 

# 세션 지속성 개선 - 실행 계획 (plan0001)

## 1단계: 백엔드 토큰 설정 확인 및 개선

### 현재 상태
- `ACCESS_TOKEN_EXPIRE_MINUTES = 43200` (30일) - 올바르게 설정됨
- JWT 토큰 생성 로직 확인 필요
- 토큰 갱신 API 로직 확인 필요

### 수행 작업
1. JWT 토큰 생성 시 정확한 만료시간 설정 확인
2. 토큰 갱신 API에서 새로운 30일 토큰 생성 확인
3. 필요시 백엔드 로직 수정

## 2단계: 프론트엔드 토큰 관리 개선

### 현재 문제점
1. `isTokenExpired()` 함수가 localStorage의 `tokenCreatedAt`만 체크
2. 실제 JWT 토큰의 만료시간은 체크하지 않음
3. 페이지 로드 시 토큰 자동 갱신 안됨
4. API 요청 실패 시 토큰 갱신 로직 부족

### 수행 작업
1. JWT 토큰 디코딩하여 실제 만료시간 체크하는 함수 추가
2. 페이지 로드 시 토큰 상태 체크 및 필요시 자동 갱신
3. API 요청 시 401 에러 발생하면 토큰 갱신 후 재시도 로직 추가
4. 토큰 갱신 성공 시 localStorage 업데이트

## 3단계: 자동 갱신 메커니즘 구현

### 목표
- 사용자가 접속할 때마다 토큰이 자동으로 갱신되어 1달씩 연장
- 브라우저 종료 후 재접속해도 세션 유지

### 구현 방법
1. DOMContentLoaded 시 토큰 갱신 체크
2. 주기적인 토큰 갱신 (현재 24시간 → 더 자주)
3. 사용자 활동 감지 시 토큰 갱신
4. API 요청 인터셉터에서 자동 토큰 갱신

## 4단계: 테스트 및 검증

### 테스트 항목
1. 브라우저 종료 후 재접속 테스트
2. 장기간 비활성 상태 후 접속 테스트  
3. 토큰 갱신 로직 테스트
4. 다양한 브라우저에서 동작 확인 

**이미지 업로드 경로 문제 해결 계획**

## 문제 상황
- 파일 저장: `./static/uploads/` 
- DB 저장 경로: `/uploads/{filename}`
- 웹 접근 시: `/uploads/` 경로로 시도하지만 실제로는 루트의 uploads 디렉토리를 찾음
- 결과: 썸네일 이미지가 보이지 않음

## 해결 방안
**방안 1: DB 경로를 static 마운트 활용하도록 수정**
- DB 저장 경로를 `/static/uploads/{filename}`로 변경
- 기존 데이터는 그대로 두고 새로운 업로드만 수정

**방안 2: Static 마운트 설정 변경** 
- `/uploads` 마운트를 `static/uploads` 디렉토리로 변경

## 선택한 방안
방안 1을 선택 - DB 경로 수정
- 더 안전하고 논리적으로 명확함
- static 마운트 구조를 그대로 활용 가능

## 작업 순서
1. attachments.py에서 파일 경로 저장 로직 수정
2. 기존 데이터 마이그레이션 스크립트 작성 (필요 시)
3. 테스트 및 검증 

# 파일 뷰어 모바일 뷰 그리드 개선 계획

## 목표
- 파일 뷰어 페이지의 모바일 뷰에서 그리드 표시를 더욱 정렬되고 깔끔하게 개선

## 단계별 계획

### 1. 현재 상태 분석
- fileviewer.html 파일 구조 분석
- 관련 CSS 파일들 확인
- 현재 모바일 뷰 그리드 스타일 파악

### 2. 문제점 식별
- 모바일에서 그리드 정렬 문제
- 반응형 디자인 개선 필요 사항
- 사용자 경험 개선 포인트

### 3. 개선 방안 구현
- CSS Grid 또는 Flexbox를 활용한 정렬 개선
- 모바일 뷰포트에 최적화된 그리드 크기 조정
- 터치 친화적인 인터페이스 개선
- 일관된 간격과 정렬

### 4. 테스트 및 검증
- 다양한 모바일 해상도에서 테스트
- 그리드 기능 정상 작동 확인

## 예상 수정 파일
- static/fileviewer.html
- static/css/ 내 관련 CSS 파일들 