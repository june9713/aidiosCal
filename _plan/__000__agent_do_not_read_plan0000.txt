# AidiosCal Project - Macro Level Plan

## Project Overview
AidiosCal appears to be a Python-based web application project. The presence of sql_app.db suggests it uses a SQL database, and the app structure indicates it's likely using a web framework.

## Final Goals
1. Create a fully functional web calendar application
2. Implement secure user authentication and data management
3. Provide an intuitive and responsive user interface
4. Ensure data persistence and reliability
5. Implement proper logging and error handling

## Major Components
1. Backend API (FastAPI/Flask)
2. Database Management (SQLAlchemy)
3. Frontend Interface
4. Authentication System
5. Logging System
6. Static Asset Management

## Technical Requirements
1. Python 3.x
2. SQL Database (SQLite currently)
3. Web Framework Dependencies
4. Frontend Assets
5. Proper Documentation

## Development Phases
1. Initial Setup and Configuration
2. Core Backend Development
3. Database Schema Implementation
4. Frontend Development
5. Authentication Integration
6. Testing and Validation
7. Documentation and Deployment

## Success Criteria
1. All core calendar functionality working
2. Secure user authentication
3. Responsive UI/UX
4. Proper error handling and logging
5. Comprehensive documentation
6. Passing test suite 

aidiosCal2 프로젝트 - 일정 관리 시스템 계획

최종 목표: 일정 관리 시스템에서 여러 개의 entryScreen을 한 번에 모아서 볼 수 있는 total view 기능 구현

거시적 계획:
1. 기존 일정 관리 시스템의 구조 파악
2. total-view-btn 버튼 클릭 이벤트 처리 구현
3. totalview.html 페이지 생성 (4xn 그리드 레이아웃)
4. 여러 개의 iframe으로 entryScreen.html 표시
5. totalview.html 페이지 기능 구현:
   - iframe 개수 입력 기능
   - 목록보기/월간보기/주간보기/로그아웃 버튼
   - 반응형 그리드 레이아웃 (한 행에 4개)

프로젝트 현재 상태:
- FastAPI 기반 일정 관리 시스템
- entryScreen.html에 total-view-btn 버튼 존재 (40번째 줄)
- 기존 JavaScript 파일: main.js, calendar.js, schedule.js
- CSS 스타일시트 있음

주요 작업 단계:
1. total-view-btn 클릭 이벤트 리스너 추가
2. totalview.html 페이지 생성
3. totalview.html 전용 CSS 및 JavaScript 추가
4. 테스트 및 최적화 

# 세션 지속성 개선 프로젝트 - 전체 계획

## 최종 목적
브라우저를 종료한 후 다시 접속해도 세션이 1달간 유지되고, 접속할 때마다 세션이 1달씩 갱신되도록 하는 것

## 현재 문제 분석
1. JWT 토큰 만료시간은 30일로 설정되어 있음
2. localStorage에 토큰이 저장되어 브라우저 종료 후에도 유지됨
3. 하지만 토큰 갱신 로직이 24시간마다만 실행되고, 페이지 접속 시 자동 갱신이 안됨
4. 토큰 만료 체크 로직에서 localStorage의 tokenCreatedAt을 기준으로 하고 있음

## 해결 방안
1. **백엔드 개선**:
   - JWT 토큰 만료시간을 확실히 1달(30일)로 설정
   - 토큰 갱신 API가 올바르게 작동하는지 확인

2. **프론트엔드 개선**:
   - 페이지 로드 시 토큰 유효성 체크 및 자동 갱신
   - 모든 API 요청 시 토큰 갱신 체크
   - localStorage 기반 세션 관리 강화
   - 토큰 만료 체크 로직 개선

## 단계별 계획
1. 백엔드 토큰 설정 확인 및 수정
2. 프론트엔드 토큰 관리 로직 개선
3. 자동 토큰 갱신 메커니즘 구현
4. 테스트 및 검증 